import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, store } from '../../app/store';
import { fetchPlayers } from './playersAPI';
import { values } from 'lodash';
import { Player } from '../../app/types/Player';

export interface PlayersStateProps {
  players: {
    [key: number] : Player;
  };
  filteredPlayers:{
    [key: number] : Player;
  };
  favoritePlayers: {
    [key: number] : Player;
  };
  view: 'filtered' | 'all';
  filters: {
    [key: string]: string | number;
  },
  currentMeta?: any;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PlayersStateProps = {
  players: {},
  filteredPlayers: {},
  favoritePlayers: {},
  filters: {},
  view: 'all',
  status: 'idle',
};

export const playersSlice = createSlice({
  name: 'players',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPlayers: (state, action: PayloadAction<any>) => {
      state.players = {
        ...action.payload.reduce((acc: any, player: any) => {
          acc[player.id] = player;
          return acc;
        }, {})
      };
    },
    addToFavorites: (state, action: PayloadAction<Player>) => {
      state.favoritePlayers[action.payload.id] = action.payload;
    },
    removeFromFavorites: (state, action: PayloadAction<Player>) => {
      delete state.favoritePlayers[action.payload.id];
    },
    setView: (state, action: PayloadAction<'filtered' | 'all'>) => {
      state.view = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetch.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetch.fulfilled, (state, action) => {
        state.status = 'idle';
      })
      .addCase(fetch.rejected, (state) => {
        console.log('rejected', fetch)
        state.status = 'failed';
      });
  },
});

export const { setPlayers, addToFavorites, removeFromFavorites, setView  } = playersSlice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchPlayers(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetch = createAsyncThunk(
  'players/fetch',
  async () => {
    const response = await fetchPlayers();
    // The value we return becomes the `fulfilled` action payload
    store.dispatch(setPlayers(response.data));
    return response;
  }
);

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const searchPlayers =
  (search: string): AppThunk =>
  async (dispatch, getState) => {
    const { data } = await fetchPlayers(search);
    console.log('response', data);
    dispatch(setView('filtered'));
    dispatch(setPlayers(data));
  };

export default playersSlice.reducer;
