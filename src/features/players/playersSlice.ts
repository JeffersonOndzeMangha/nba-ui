import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchPlayers } from './playersAPI';

export interface PlayersStateProps {
  players: any[];
  filteredPlayers: any[];
  favoritePlayers: any[];
  view: 'filtered' | 'all';
  filters: any,
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PlayersStateProps = {
  players: [],
  filteredPlayers: [],
  favoritePlayers: [],
  filters: [],
  view: 'all',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchPlayers(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetch = createAsyncThunk(
  'players/fetch',
  async () => {
    const response = await fetchPlayers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const playersSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPlayers: (state, action: PayloadAction<any[]>) => {
      state.players = [...state.players, action.payload];
    },
    setView: (state, action: PayloadAction<'filtered' | 'all'>) => {
      state.view = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetch.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetch.fulfilled, (state, action) => {
        state.status = 'idle';
      })
      .addCase(fetch.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { setPlayers } = playersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const favoritePlayersSelector = (state: RootState) => state.players.favoritePlayers;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const searchPlayers =
  (search: string): AppThunk =>
  (dispatch, getState) => {
    const { players } = getState().players;
    const filteredPlayers = players.filter((player) => {
      return player.name.toLowerCase().includes(search.toLowerCase());
    });
    dispatch(setPlayers(filteredPlayers));
  };

export default playersSlice.reducer;
